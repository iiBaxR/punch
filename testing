--// attack animation

------<<|| Defining/Variables |>>------
local char = owner.Character
local Debris = game:GetService("Debris")
local TweenService = game:GetService("TweenService")
local anim = "idle"
local attack = false
local combo = 0
script.Parent = char

local Head = char["Head"]
local RightArm = char["Right Arm"]
local LeftArm = char["Left Arm"]
local RightLeg = char["Right Leg"]
local LeftLeg = char["Left Leg"]
local Torso = char["Torso"]
local RootPart = char["HumanoidRootPart"]

local cfn, cfa, v3n, rad, cos, sin, random = CFrame.new, CFrame.Angles, Vector3.new, math.rad, math.cos, math.sin, math.random

------<<|| SHORTCUT FUNCTIONS ||>>-------



function Swait(NUMBER)
	if NUMBER == 0 or NUMBER == nil then
		ArtificialHB.Event:wait()
	else
		for i = 1, NUMBER do
			ArtificialHB.Event:wait()
		end
	end
end

function Swait(NUMBER)
	if NUMBER == 0 or NUMBER == nil then
		ArtificialHB.Event:wait()
	else
		for i = 1, NUMBER do
			ArtificialHB.Event:wait()
		end
	end
end


function newWeld(part0, part1)
	local weld = Instance.new("Weld", part1)
	weld.Part0 = part0
	weld.Part1 = part1
	return weld
end

local function newPart(size, name, transparency, anchored, parent, material)
	local Part = Instance.new("Part")
	Part.CFrame = RootPart.CFrame
	Part.Size = size
	Part.Parent = parent
	Part.Transparency = transparency
	Part.Material= material
	Part.CanCollide = false
	Part.Anchored = anchored
	Part.Name = name
	Part.Color = Color3.fromRGB(color)
	return Part
end

local function newMesh(scale, parent, typemesh)
	local Mesh = Instance.new("SpecialMesh", char)
	Mesh.Scale = scale
	Mesh.Parent = parent
	Mesh.MeshType = typemesh
	return Mesh
end

local function newAttachment(position,parent)
	local attachment = Instance.new("Attachment")
	attachment.Position = position
	attachment.Parent = parent
	return attachment
end

local function newParticle(parent,rate,life,texture,colorsequence1,colorsequence2,Transparency1,Transparency2,Transparency3,Transparency4,size1,size2,size3,direction,speed,spreading)
	local emitter = Instance.new("ParticleEmitter")
	emitter.Rate = rate 
	emitter.Lifetime = life
	emitter.Enabled = true
	emitter.Parent = parent
	emitter.Texture = texture
	local colorKeypoints = {
		colorsequence1,
		colorsequence2,
	}
	emitter.Color = ColorSequence.new(colorKeypoints)

	local numberKeypoints = {
		Transparency1, 
		Transparency2, 
		Transparency3, 
		Transparency4
	}
	emitter.Transparency = NumberSequence.new(numberKeypoints)
	emitter.LightEmission = 1 
	emitter.LightInfluence = 0 
	emitter.EmissionDirection = direction 
	emitter.Speed = speed
	emitter.Drag = 0 
	emitter.VelocitySpread = NumberRange.new(0, 0)
	emitter.VelocityInheritance = 0 
	emitter.Acceleration = v3n(0, 0, 0)
	emitter.LockedToPart = true 
	emitter.SpreadAngle = spreading
	local numberKeypoints2 = {
		size1, 
		size2,
		size3
	}
	emitter.Size = NumberSequence.new(numberKeypoints2)
	emitter.ZOffset = 0 
	emitter.Rotation = NumberRange.new(0, 0) 
	emitter.RotSpeed = NumberRange.new(0)
	return emitter
end



function ray(pos, dir, range, ignoring)
	return workspace:FindPartOnRay(Ray.new(pos, dir.unit * range), ignoring)
end

function dash(parent,cframes,wait)
		local BodyPosition = Instance.new("BodyPosition")
		BodyPosition.Parent = parent
		BodyPosition.maxForce = Vector3.new(math.huge,math.huge,math.huge)
		BodyPosition.Position = RootPart.CFrame*cframes.p
		task.wait(wait)
		BodyPosition:Destroy()
	return dash 
end

function push(parent,distance,wait)
        local bv = Instance.new("BodyVelocity")
        bv.maxForce = Vector3.new(math.huge, math.huge, math.huge)
        bv.velocity = CFrame.new(RootPart.Position, parent.Position).lookVector * distance
        bv.Parent = parent
        game:GetService("Debris"):AddItem(bv, wait)
	return push
end
------<<||  N  L  S  ||>>----------



if not LeftArm:FindFirstChild("Weld") then 
	newWeld(Torso, LeftArm) 
end
if not RightArm:FindFirstChild("Weld") then 
	newWeld(Torso, RightArm) 
end
if not LeftLeg:FindFirstChild("Weld") then  
	newWeld(Torso, LeftLeg) 
end
if not RightLeg:FindFirstChild("Weld") then 
	newWeld(Torso, RightLeg) 
end
if not Torso:FindFirstChild("Weld") then 
	newWeld(RootPart, Torso) 
end
if not Head:FindFirstChild("Weld") then 
	newWeld(Torso, Head) 
end

LeftArm.Weld.C1 = cfn(0, 0.5, 0)
RightArm.Weld.C1 = cfn(0, 0.5, 0)
LeftLeg.Weld.C1 = cfn(0, 1, 0)
RightLeg.Weld.C1 = cfn(0, 1, 0)
Torso.Weld.C1 = cfn(0, -1, 0)


local Remote = Instance.new("RemoteEvent",script)
Remote.Name = "MainRemote"
function CreateBindableEvent(nam)
	local Bind = Instance.new("BindableEvent",Remote)
	Bind.Name = nam
	return Bind
end
local Mouse = {Hit = CFrame.new(0,0,0),Target = nil,KeyDown = CreateBindableEvent("KeyDown").Event,KeyUp = CreateBindableEvent("KeyUp").Event,Button1Down = CreateBindableEvent("Button1Down").Event,Button1Up = CreateBindableEvent("Button1Up").Event}
local InputService = {InputBegan = CreateBindableEvent("InputBegan"),InputEnded = CreateBindableEvent("InputEnded")}
Remote.OnServerEvent:Connect(function(Plr,Reason,Val,Val2)
	if Reason == "Event" then
		local Event = Remote:FindFirstChild(Val)
		if Event then
			Event:Fire(Val2)
		end
	elseif Reason == "MouseInfo" then
		Mouse.Hit = Val.Hit
		Mouse.Target = Val.Target or nil
	end
end)
NLS([[
local Mouse = owner:GetMouse()
local Input = game:GetService("UserInputService")
local Remote = script.Parent:WaitForChild("MainRemote")
Input.InputBegan:Connect(function(...)
    Remote:FireServer("Event","InputBegan",...)
end)
Input.InputEnded:Connect(function(...)
    Remote:FireServer("Event","InputEnded",...)
end)
Mouse.KeyDown:Connect(function(k)
    Remote:FireServer("Event","KeyDown",k)
end)
Mouse.KeyUp:Connect(function(k)
    Remote:FireServer("Event","KeyUp",k)
end)
Mouse.Button1Down:Connect(function()
    Remote:FireServer("Event","Button1Down")
end)
Mouse.Button1Up:Connect(function()
    Remote:FireServer("Event","Button1Up")
end)

while true do
    game:GetService("RunService").Stepped:wait()
    Remote:FireServer("MouseInfo",{Hit = Mouse.Hit,Target = Mouse.Target})
end

]],script)


function firstattack()
	for i = 1, 2,0.08 do
		task.wait()
		Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-10),rad(70),0), 0.2)
		Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(0),rad(-70),rad(0)), 0.2)
		RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.5,0.25,0)*cfa(rad(110),rad(40),rad(-10)), 0.2)
		LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.3,0.2,0)*cfa(rad(115),rad(-10),rad(0)), 0.2)
		RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-1,-0.1)*cfa(rad(0),rad(-10),rad(5)), 0.2)
		LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,-0.2)*cfa(rad(-3),rad(30),rad(-5)), 0.2)

	end
    task.spawn(function()
		dash(RootPart, cfn(0,0,-7), 0.2)
		local succ, fail = pcall(function()
			local Params = RaycastParams.new()
			Params.FilterType = Enum.RaycastFilterType.Blacklist
			Params.FilterDescendantsInstances = {char}
			Params.RespectCanCollide = false

			local Origin = RootPart.Position
			local Direction = RootPart.CFrame.LookVector * 7
			local rayCast = workspace:Raycast(Origin, Direction, Params)

			if rayCast and rayCast.Instance:FindFirstAncestorOfClass("Model") then
                local rcharacter = rayCast.Instance:FindFirstAncestorOfClass("Model")
				local Humanoid = rcharacter:FindFirstChildOfClass("Humanoid")
				local hrp = rcharacter.HumanoidRootPart
				local hed = rcharacter.Head
				if Humanoid then
					Humanoid:TakeDamage(25)
					push(hed, 30, 0.05)
					
					task.spawn(function()
						Humanoid.PlatformStand = true
						local fall = newPart(Vector3.new(1,1,1)," ", 1, false, workspace, "Plastic")
					    fall.CanCollide = true; newWeld(hrp, fall); fall.Weld.C1 = cfn(0,2,0)
						task.spawn(function()
							task.wait(1.8)
							fall:Destroy()
							end)
						task.wait(2)
						Humanoid.PlatformStand = false
						fall:Destroy()
					end)
			
				end
            end
		end)
	end)
	for i = 1, 2,0.06 do
		task.wait()
		Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-10),rad(-60),0), 0.7)
		Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(0),rad(60),rad(0)), 0.7)
		RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.5,0.5,-0.1)*cfa(rad(90),rad(0),rad(60)), 0.7)
		LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.3,0,0)*cfa(rad(115),rad(-40),rad(0)), 0.7)
		RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.6,-1,-0.2)*cfa(rad(-20),rad(-50),rad(-10)), 0.7)
		LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,-0.2)*cfa(rad(4),rad(30),rad(-5)), 0.7)
	end
	attack = false
end

function firstattack1()
	for i = 1, 2,0.08 do
		task.wait()
		Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-10),rad(-70),0), 0.2)
		Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(0),rad(70),rad(0)), 0.2)
		RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.3,0.2,0)*cfa(rad(115),rad(10),rad(10)), 0.2)
		LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.5,0.25,0)*cfa(rad(110),rad(-40),rad(10)), 0.2)
		RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-1,-0.1)*cfa(rad(0),rad(-10),rad(5)), 0.2)
		LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,-0.2)*cfa(rad(-3),rad(30),rad(-5)), 0.2)

	end
	task.spawn(function()
		dash(RootPart, CFrame.new(0,0,-7), 0.2)
		local succ, fail = pcall(function()
			local Params = RaycastParams.new()
			Params.FilterType = Enum.RaycastFilterType.Blacklist
			Params.FilterDescendantsInstances = {char}
			Params.RespectCanCollide = false

			local Origin = RootPart.Position
			local Direction = RootPart.CFrame.LookVector * 7
			local rayCast = workspace:Raycast(Origin, Direction, Params)

			if rayCast and rayCast.Instance:FindFirstAncestorOfClass("Model") then
                local rcharacter = rayCast.Instance:FindFirstAncestorOfClass("Model")
				local Humanoid = rcharacter:FindFirstChildOfClass("Humanoid")
				local hrp = rcharacter.HumanoidRootPart
				local hed = rcharacter.Head
				if Humanoid then
					Humanoid:TakeDamage(10)
					push(hed, 30, 0.05)
					
					task.spawn(function()
						Humanoid.PlatformStand = true
						local fall = newPart(Vector3.new(1,1,1)," ", 1, false, workspace, "Plastic")
					    fall.CanCollide = true; newWeld(hrp, fall); fall.Weld.C1 = CFrame.new(0,2,0)
						task.spawn(function()
							task.wait(1.8)
							fall:Destroy()
							end)
						task.wait(2)
						Humanoid.PlatformStand = false
						fall:Destroy()
					end)
			
				end
            end
		end)
	end)
	for i = 1, 2,0.06 do
		task.wait()
		Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-10),rad(60),0), 0.7)
		Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(0),rad(-60),rad(0)), 0.7)
		RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.3,0,0)*cfa(rad(115),rad(40),rad(0)), 0.7)
		LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.5,0.5,-0.1)*cfa(rad(90),rad(-0),rad(-60)), 0.7)
		RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.6,-1,-0.2)*cfa(rad(-20),rad(-50),rad(-10)), 0.7)
		LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,-0.2)*cfa(rad(4),rad(30),rad(-5)), 0.7)
	end
	attack = false
end

function uppercat()
	for i = 1, 2,0.04 do
		task.wait()
		Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-5),rad(60),0), 0.4)
		Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(0),rad(-60),rad(0)), 0.4)
		RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.3,-0.1,-0.5)*cfa(rad(90),rad(-10),rad(-30)), 0.4)
		LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.3,0,0)*cfa(rad(115),rad(-40),rad(0)), 0.4)
		RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-1,-0.1)*cfa(rad(0),rad(-10),rad(5)), 0.4)
		LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,-0.2)*cfa(rad(-3),rad(30),rad(-5)), 0.4)
	end
	task.spawn(function()
		dash(RootPart,cfn(0,20,0),0.2)
		local succ, fail = pcall(function()
			local Params = RaycastParams.new()
			Params.FilterType = Enum.RaycastFilterType.Blacklist
			Params.FilterDescendantsInstances = {char}
			Params.RespectCanCollide = false

			local Origin = RootPart.Position
			local Direction = RootPart.CFrame.LookVector * 7
			local rayCast = workspace:Raycast(Origin, Direction, Params)

			if rayCast and rayCast.Instance:FindFirstAncestorOfClass("Model") then
                local rcharacter = rayCast.Instance:FindFirstAncestorOfClass("Model")
				local Humanoid = rcharacter:FindFirstChildOfClass("Humanoid")
				local hrp = rcharacter.HumanoidRootPart
				local hed = rcharacter.Head
				if Humanoid then
					Humanoid:TakeDamage(10)
					dash(hed,cfn(0,20,0),0.2)
					task.spawn(function()
						Humanoid.PlatformStand = true
						local fall = newPart(Vector3.new(1,1,1)," ", 1, false, workspace, "Plastic")
					    fall.CanCollide = true; newWeld(hrp, fall); fall.Weld.C1 = CFrame.new(0,2,0)
						task.spawn(function()
							task.wait(1.8)
							fall:Destroy()
							end)
						task.wait(2)
						Humanoid.PlatformStand = false
						fall:Destroy()
					end)
			
				end
            end
		end)
	end)
	for i = 1, 2,0.035 do
		task.wait()
		Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0.2)*cfa(rad(20),rad(-70),0), 0.6)
		Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(0),rad(70),rad(0)), 0.6)
		RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.5,1,-0.5)*cfa(rad(170),rad(70),rad(0)), 0.6)
		LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.3,0,0)*cfa(rad(115),rad(-40),rad(0)), 0.6)
		RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.7,-0.3,-0.4)*cfa(rad(-30),rad(60),rad(5)), 0.6)
		LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,-0.2)*cfa(rad(-3),rad(-30),rad(-5)), 0.6)
	end
	attack = false
end

Mouse.KeyDown:connect(function(k)
	if k == "e" and attack == false and combo == 0 then
		attack = true
		char.Humanoid.WalkSpeed = 3
        firstattack()
		combo = 1
	elseif k == "e" and attack == false and combo == 1 then
		attack = true
		char.Humanoid.WalkSpeed = 3
        firstattack1()
		combo = 2
	elseif k == "e" and attack == false and combo == 2 then
		attack = true
		char.Humanoid.WalkSpeed = 3
        uppercat()
		combo = 0
	end
end)


game:GetService('RunService').Heartbeat:connect(function()
	local notfloor = ray(RootPart.Position, (cfn(RootPart.Position, RootPart.Position + v3n(0, -1, 0))).lookVector, 5, char)
	local velwalk = (RootPart.Velocity*v3n(1, 0, 1)).magnitude
	local veljump = RootPart.Velocity.y
	local currentFrame = cfn(char.HumanoidRootPart.Position*v3n(1,0,1),(char.HumanoidRootPart.Position+char.HumanoidRootPart.CFrame.LookVector)*v3n(1,0,1))
	one = char.Humanoid.MoveDirection * currentFrame.LookVector
	two = char.Humanoid.MoveDirection * currentFrame.RightVector
	forbac = one.X+one.Z
	sidway = two.X+two.Z
	if not attack then
		if velwalk >= 1 and notfloor ~= nil then
			anim = "walk"
			char.Humanoid.WalkSpeed = 16

		elseif velwalk < 1 and notfloor ~= nil then
			anim = "idle"
			char.Humanoid.WalkSpeed = 16

		elseif veljump > 1 and notfloor == nil then
			anim = "jump"
			char.Humanoid.WalkSpeed = 16

		elseif veljump < -1 and notfloor == nil then
			anim = "fall"
			char.Humanoid.WalkSpeed = 16
		end
		if anim == "idle" then
			Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-5+3*sin(os.clock()*2)),rad(40),0), 0.2)
			Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1+0.1*cos(os.clock()*2),0)*cfa(rad(0),rad(-40),rad(0)), 0.2)
			RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.3,0+0.1*sin(os.clock()*2),-0.5)*cfa(rad(130+5*sin(os.clock()*2)),rad(0),rad(-30)), 0.2)
			LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.3,0+0.1*sin(os.clock()*2),0)*cfa(rad(115+5*sin(os.clock()*2)),rad(-10),rad(0)), 0.2)
			RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-1-0.1*cos(os.clock()*2),-0.1)*cfa(rad(0),rad(-10),rad(5)), 0.2)
			LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1-0.1*cos(os.clock()*2),-0.2)*cfa(rad(-3),rad(30),rad(-5)), 0.2)

		elseif anim == "walk" then
			Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(forbac*0.2,rad(0-10*cos(os.clock()*10))-sidway*0.7,0), 0.08)
			Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1+.15*cos(os.clock()*20),0)*cfa(-forbac*0.2+0.1*cos(os.clock()*20),rad(0+10*cos(os.clock()*10)),-sidway*0.2), 0.08)
			RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.5,0.4,0)*cfa(rad(0)+forbac*2*cos(os.clock()*10),rad(0),rad(0)-forbac*0.75*cos(os.clock()*10)), 0.08)
			LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.5,0.4,0)*cfa(rad(0)-forbac*2*cos(os.clock()*10),rad(0),rad(0)-forbac*0.75*cos(os.clock()*10)), 0.08)
			RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-1+0.5*sin(os.clock()*10),0)*cfa(-forbac*1.8*cos(os.clock()*10),rad(0),-sidway*1.3*cos(os.clock()*10)), 0.08)
			LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1-0.5*sin(os.clock()*10),0)*cfa(forbac*1.8*cos(os.clock()*10),rad(0),sidway*1.3*cos(os.clock()*10)), 0.08)

		elseif anim == "jump" then
			Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(10),rad(0),0), 0.08)
			Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(10),rad(0),rad(0)), 0.08)
			RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.5,0.5,0)*cfa(rad(0),rad(-20),rad(40)), 0.08)
			LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.5,0.5,0)*cfa(rad(0),rad(20),rad(-40)), 0.08)
			RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-0.3,-0.5)*cfa(rad(-20),rad(-10),rad(0)), 0.08)
			LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,0)*cfa(rad(-2),rad(20),rad(0)), 0.08)

		elseif anim == "fall" then
			Head.Weld.C0 = Head.Weld.C0:Lerp( cfn(0,1.5,0)*cfa(rad(-20),rad(0),0), 0.2)
			Torso.Weld.C0 = Torso.Weld.C0:Lerp( cfn(0,-1,0)*cfa(rad(-10),rad(0),rad(0)), 0.2)
			RightArm.Weld.C0 = RightArm.Weld.C0:Lerp( cfn(1.5,0.5,0)*cfa(rad(0),rad(-40),rad(60)), 0.2)
			LeftArm.Weld.C0 = LeftArm.Weld.C0:Lerp( cfn(-1.5,0.5,0)*cfa(rad(0),rad(40),rad(-60)), 0.2)
			RightLeg.Weld.C0 = RightLeg.Weld.C0:Lerp( cfn(0.5,-0.1,-0.5)*cfa(rad(-20),rad(-10),rad(0)), 0.08)
			LeftLeg.Weld.C0 = LeftLeg.Weld.C0:Lerp( cfn(-0.5,-1,0)*cfa(rad(10),rad(20),rad(0)), 0.2)
		end
	end
end)
